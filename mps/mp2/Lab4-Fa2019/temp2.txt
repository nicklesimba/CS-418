<script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexNormal;
  attribute vec3 aVertexPosition;

  uniform mat4 uMVMatrix;
  uniform mat4 uPMatrix;
  uniform mat3 uNMatrix;

  varying vec3 vPosition;
  varying vec3 vNormal;

  void main(void) {
    // get vertex position in eye coordinates
    vec4 vertexPositionEye4 = uMVMatrix * vec4(aVertexPosition, 1.0);
    vPosition = vertexPositionEye4.xyz / vertexPositionEye4.w;
    vNormal = normalize(uNMatrix * aVertexNormal);

    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
  }
</script>
  
<script id="shader-fs" type="x-shader/x-fragment">
    precision mediump float;
  varying vec3 vPosition;
  varying vec3 vNormal;

  uniform vec3 uLightPosition;
  uniform vec3 uAmbientLightColor;
  uniform vec3 uDiffuseLightColor;
  uniform vec3 uSpecularLightColor;
  uniform vec3 uKAmbient;
  uniform vec3 uKDiffuse;
  uniform vec3 uKSpecular;
  
  uniform float uShininess;

  void main(void) {
  
    vec3 vectorToLightSource = normalize(uLightPosition - vPosition);
    
    vec3 normalEye = vNormal;
    
    float diffuseLightWeightning = max(dot(normalEye, 
                                    vectorToLightSource), 0.0);
                                       
    vec3 reflectionVector = normalize(reflect(-vectorToLightSource, 
                                             normalEye));
    
    vec3 viewVectorEye = -normalize(vPosition);
    
    float rdotv = max(dot(reflectionVector, viewVectorEye), 0.0);
    
    float specularLightWeightning = pow(rdotv, uShininess);

    // Sum up all three reflection components and send to the fragment shader
    gl_FragColor = vec4(((uAmbientLightColor*uKAmbient)
                + (uDiffuseLightColor*uKDiffuse) * diffuseLightWeightning
                + (uSpecularLightColor*uKSpecular) * specularLightWeightning),1.0);
  }
</script>